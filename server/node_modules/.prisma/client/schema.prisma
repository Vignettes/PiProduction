// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String? // Nullable for OAuth users
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // OAuth related fields
  googleId String? @unique
  githubId String? @unique

  // Relations
  songs        Song[]
  payments     Payment[]
  socialProofs SocialProof[]
}

model Song {
  id        String   @id @default(cuid())
  title     String
  artist    String?
  audioUrl  String // URL to stored audio file
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Analysis results
  chordAnalysis Json? // Stores chord progression
  learningPlan  Json? // Stores segmented learning plan

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  payments     Payment[]
  socialProofs SocialProof[]
}

model Payment {
  id        String   @id @default(cuid())
  userId    String
  songId    String
  amount    Float
  status    String // pending, completed, waived
  type      String // initial, final
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
  song Song @relation(fields: [songId], references: [id])
}

model SocialProof {
  id        String   @id @default(cuid())
  userId    String
  songId    String
  url       String // Social media post URL
  status    String // pending, verified, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
  song Song @relation(fields: [songId], references: [id])
}
